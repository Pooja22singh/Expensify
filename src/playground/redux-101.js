import { createStore } from 'redux';

//in general actions describe the fact that something happened
//While reducers actually make that something happen
//They describe the changes that happens to the state
//ie they actually do the changes to the state
//specifiec by all these actions

//The below function is known as reducer
//1.Reducers are pure functions
//Pure functions are those whose output entirely depends on the parameters
//ie the input passed to the function. Nothimg from the outside scope, even the output variable
//2.Never change state or actions ie the whole state shouldnot be directly changed rather
//whatever be the variable in the state u should change it and return an object, not the entire state
//So our below function satisfies both these
//Therefor it is a reducer
const countReducer=(state = { count: 0 }, action) => {
    switch (action.type) {
        case "INCREMENT":
            const incrementBy = typeof action.incrementBy === "number" ? action.incrementBy : 0;
            return {
                count: state.count + incrementBy
            };
        case "DECREMENT":
            const decrementBy = typeof action.decrementBy === "number" ? action.decrementBy : 0;
            return {
                count: state.count - decrementBy
            };
        case "SET":
            return {
                count: action.count
            };
        case "RESET":
            return {
                count: 0
            }
        default: return state;
    }
}
//Reducer with defined changes to the state asked by each of the action objects generated by the action generators
//passed to the Redux store to make changes to the store
const store = createStore(countReducer);
console.log(store.getState());

//increment the count
//Actions are being dispatched to the store
//Each action is basically an object which has a type
//Convention is to use bold letters in redux but its not enforced
const unsubscribe = store.subscribe(() => {
    console.log(store.getState());
})


//Below are the action generators 



//below are the action generators
//Action generators create action objects
//These help in reducing typo
//Also we can easily handle default vales and avoid TypeErrors
//ANd code repetions is reduced
//ANd less code is written everytime we want to do an action
//just call the functions with required values
const increment = ({ incrementBy = 1 } = {}) => {
    return {
        type: "INCREMENT",
        incrementBy
    }
}
const decrement = ({ decrementBy = 1 } = {}) => {
    return {
        type: "DECREMENT",
        decrementBy
    }
}
const set = ({ count } = {}) => {
    return {
        type: "SET",
        count
    }
}
const reset = () => {
    return {
        type: "RESET"
    }
}
//These are the actions we dispatch to the Redux store
store.dispatch(increment({incrementBy:20}));
//unsubscribe();
//Convention is to use bold letters in redux but its not enforced
store.dispatch(decrement({decrementBy:8}));
store.dispatch(set({count: 101}));
 store.dispatch(reset());

