import database from '../firebase/firebase';
import expenses from '../selectors/expenses';
/** Expenses action generators*/
//All other actions of redux are synchronous by default
//But when we need to connect to a long running process
//we need asynch lik bringing data from firebase
//Add Expense
const addExpense = (expense) => ({
    type: "ADD_EXPENSE",
    expense
}
);
//Asynchornous action
// We cteate a function which returns a function
//instead of generating object which we have been doing
// The method returned is called by redux with a dispatch 
//object as a parameter
export const startAddExpenses = (expenseData = {}) => {
    return (dispatch) => {
        const { description = "", note = "", amount = 0, createDate = 0 } = expenseData;
        const expense = { description, note, amount, createDate };
        //We are pushing array of expenses to firebase
        //So for that firebase api has provided us a method
        //push, set can also ne used for the same but what it does
        // is it creates indexes 0 1 2 and store the object correspondom to it
        // but it is not what we want, here we fetch or classify or make changes
        //to data based on an unique id generated by uuid libraray
        // So set cannot meet our reuirement
        //push on the other hand stores a list of data to db
        // by genearting a new unique id and against it stores 
        // the list in the database. So uuid generation can be dropped oof
        // and id generated by fb can be used and hence meeting
        //our requirements
        database.ref('expenses').push(expense).then((ref) => {
            dispatch(addExpense({
                id: ref.key,
                ...expense
            }));
        });
    };
}
//Remove Expense
export const removeExpense = ({ id } = {}) => ({
    type: "REMOVE_EXPENSE",
    id
});
//Edit Epense
export const editExpense = (id, updates) => ({
    type: "EDIT_EXPENSE",
    id,
    updates
});

export const setExpense = (expenses) => ({
    type:"SET_EXPENSES",
    expenses
});

export const startSetExpenses = () => {
    return (dispatch) => {
      return database.ref('expenses').once('value').then((snapshot) => {
            const expenses = [];
            snapshot.forEach((childSnapshot) => {
                expenses.push(
                    {
                        id:childSnapshot.key,
                        ...childSnapshot.val()
                    }
                );
            });
            dispatch(setExpense(expenses));
        });
    }
}








